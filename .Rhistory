?odbcConnect
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables
close(con)
rm(list=ls())
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables()
fix(con)
fix(con)
sqlFetch(con,"RR_GEO_UNIT")
sqlFetch(con,"RR_GEO_UNIT.csv")
sqlTables(con)
close(con)
sqlTables(con)
sqlFetch(con,"RR_GEO_UNIT.csv")
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables(con)
close(con)
?random
?rand
??random
?rnorm
?min
min(max(rnorm(100,0.5,0.5),0),1)
rnorm
?rnorm
rnorm(100,0.5,0.5)
min(rnorm(100,0.5,0.5),0)
min(rnorm(100,0.5,0.5),1)
min(max(rnorm(100,0.5,0.5),rep(0,100)),rep(1,100))
?REP
?rep
rep(0,100)
?min
pmin(pmax(rnorm(100,0.5,0.5),0),1)
pmin(pmax(rnorm(100,0.5,0.25),0),1)
?sapply
sapply(1:10, pmin(pmax(rnorm(100,0.5,0.25),0),1))
rep(pmin(pmax(rnorm(100,0.5,0.25),0),1)),10)
?replicate
?replicate
replicate(10,(pmin(pmax(rnorm(100,0.5,0.25),0),1)))
replicate(10,(pmin(pmax(rnorm(100,0.5,0.25),0),1)),simplify="vector")
replicate(81,seq(1:157))
replicate(81,replicate(78(pmax(pmin(rnorm(157,0.5,0.25),1),0))))
replicate(81,replicate(78,pmin(pmax(rnorm(100,0.5,0.25),0),1)))
d <-replicate(81,replicate(78,pmin(pmax(rnorm(100,0.5,0.25),0),1)))
length(d)
row(d)
nrow(d)
ncol(d)
rm(d)
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables(con)
close(con)
sqlTables(con)
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables(con)
close(con)
sqlTables(con)
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables(con)
close(con)
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables(con)
close(con)
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables(con)
sqlFetch(con,"RR_GEO_UNIT.csv")
sqlFetch(con,"RR_GEO_UNIT")
close(con)
close(con)
rm(con)
con <- odbcConnect("zrr-dev",uid="",pwd="")
library(RODBC)
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables(con)
sqlFetch(con,"RR_GEO_UNIT.csv")
sqlFetch(con,"RR_GEO_UNIT")
close(con)
con <- odbcConnect("zrr-dev",uid="",pwd="")
?sqlQuery
sqlQuery(con,"SELECT * FROM RR_GEO_UNIT")
sqlQuery(con,"SELECT * FROM RR_GEO_UNIT.csv")
sqlFetch(con,"RR_GEO_UNIT.csv")
sqlFetch(con,"RR_GEO_UNIT.txt")
sqlFetch(con,"RR_GEO_UNIT.csv")
sqlFetch(con,"RR_GEO_UNIT.txt")
sqlTables(con)
sqlFetch(con,"RR_GEO_UNIT.txt")
sqlQuery(con,"SELECT * FROM RR_GEO_UNIT.txt")
sqlQuery(con,"SELECT * FROM RR_GEO_UNIT.txt")
close(con)
?odbcConnect
close(con)
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables(con)
sqlColumns(con,"RR_GEO_UNIT.csv"
)
sqlFetch(con,"RR_GEO_UNIT.csv")
sqlFetch(con,"RR_GEO_UNIT")
sqlQuery(con,"SELECT * FROM RR_GEO_UNIT.csv")
close(con)
con <- odbcConnect("zrr-dev",uid="",pwd="")
sqlTables(con)
sqlFetch(con,"RR_GEO_UNIT.csv")
sqlFetch(con,"<NA>.RR_GEO_UNIT.csv")
?sqlSchema(con)
?sqlSchemas(con)
sqlQuery(con,"SELECT * FROM RR_GEO_UNIT.csv")
close(con)
con <- odbcConnect("zrr-dev",uid="",pwd="")
con
fix(con)
con("ConnectionString")
con("connectionstring")
?paste
library(shiny)
source('~/zrr.R/zrr.shiny.dev/global.R')
source('~/zrr.R/zrr.shiny.dev/global.R')
source('~/zrr.R/zrr.shiny.dev/global.R')
source('~/zrr.R/zrr.shiny.dev/global.R')
source('~/zrr.R/zrr.shiny.dev/global.R')
source('~/zrr.R/zrr.shiny.dev/global.R')
source('~/zrr.R/zrr.shiny.dev/global.R')
close(con)
source('~/zrr.R/zrr.shiny.dev/global.R')
Q
source('~/zrr.R/zrr.shiny.dev/global.R')
Q
rm(list=ls())
source('~/zrr.R/zrr.shiny.dev/global.R')
source('~/zrr.R/zrr.shiny.dev/global.R')
risknames
Q
close(con)
source('~/zrr.R/zrr.shiny.dev/global.R')
risknames
Q
source('~/zrr.R/zrr.shiny.dev/global.R')
risknames
levels(factor(risknames[,"INDICATOR_CATEGORY"]))
Q
rm(list=ls())
library(shiny)
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
close(con)
runApp("zrr.shiny.dev")
query
sqlQuery(con,query)
Q
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
query
sqlQuery(con,query)
Q
sqlQuery(con,query)
runApp("zrr.shiny.dev")
query
sqlQuery(con,query)
Q
close(con)
runApp("zrr.shiny.dev")
sqlQuery(con,query)
Q
close(con)
close(con)
runApp("zrr.shiny.dev")
sqlQuery(con,query)
Q
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
results
colnames(result)
colnames(results)
merge(results,countries,by.x="FK_GEO_UNIT",by.y="GEO_UNIT_ID")[,c("FK_GEO_UNIT","GEO_NAME","FK_INDICATOR","INDICATOR_VALUE","WALL")]
merge(results,countries,by.x=FK_GEO_UNIT,by.y=GEO_UNIT_ID)[,c("FK_GEO_UNIT","GEO_NAME","FK_INDICATOR","INDICATOR_VALUE","WALL")]
merge(results,countries,by.x="FK_GEO_UNIT",by.y="GEO_UNIT_ID")
merge(results,countries,by.x=FK_GEO_UNIT,by.y=GEO_UNIT_ID)[,c("FK_GEO_UNIT","GEO_NAME","FK_INDICATOR","INDICATOR_VALUE","WALL")]
merge(results,countries,by.x=FK_GEO_UNIT,by.y=GEO_UNIT_ID)
merge(results,countries,by.x="FK_GEO_UNIT",by.y="GEO_UNIT_ID")
results <- merge(results,countries,by.x="FK_GEO_UNIT",by.y="GEO_UNIT_ID")
results <- merge(results,risknames,by.x="FK_INDICATOR",by.y="INDICATOR_ID")
results
colnames(results)
results[,c("FK_GEO_UNIT","FK_INDICATOR","GEO_NAME","INDICATOR_NAME","INDICATOR_VALUE","WALL")]
results[,c("FK_GEO_UNIT","FK_INDICATOR","GEO_NAME","INDICATOR_NAME","INDICATOR_VALUE","'WALL'")]
Q
close(con)
runAppp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
Q
runApp("zrr.shiny.dev")
close(con)
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
close(con)
rm(list=ls())
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
getws()
getwd()
rm(list=ls())
library(shiny)
rm(con)
runApp("zrr.shiny.dev")
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line",
"bubble", "scatter"), group = "Clap", size = "Age")
h1
print(h1)
h1$print()
h1
d<-h1$print
head(d)
?head
head(d,15)
head(d,25)
head(d,50)
rm(d)
h1$print
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line",
"bubble", "scatter"), group = "Clap", size = "Age")
h1$print
h1$print()
d<-h1$print()
d
rm(d)
h1
h1$print
fix(`h1`)
print(h1)
install.packages("inspect")
summary(h1)
dump(h1)
uput(h1)
dput(h1)
?dump
dump(h1,"h1.R")
dump("h1","h1.R")
str(h1)
lapply(h1$series,str())
lapply(h1$series,str
)
lapply(h1$series,class)
lapply(h1$series,length)
h1$series[1]
h1$series[[1]]
h1$series
hPlot
runApp("zrr.shiny.dev")
?getLayer
getLayer
close(con)
runApp("zrr.shiny.dev")
rChart
d <- getLayer(...)
d
Q
close(con)
runApp("zrr.shiny.dev")
d <- getLayer(...)
d
Q
runApp("zrr.shiny.dev")
Q
runApp("zrr.shiny.dev")
hPlot
runApp("zrr.shiny.dev")
d$group
!is.null(d$group)
groups <- sort(unique(data$group))
types <- rep(d$type, length(groups))  # repeat types to match length of groups
groups
types
?plyr::ddply
plyr::ddply(data, .(group), function(x) {
g <- unique(x$group)
i <- which(groups == g)
x$group <- NULL  # fix
rChart$series(
data = toJSONArray2(x, json = F, names = F),
name = g,
type = types[[i]],
marker = list(radius = radius),
draggableY = TRUE
)
return(NULL)
})
.(group)
hPlot
plyr::ddply(data, groups, function(x) {
g <- unique(x$group)
i <- which(groups == g)
x$group <- NULL  # fix
rChart$series(
data = toJSONArray2(x, json = F, names = F),
name = g,
type = types[[i]],
marker = list(radius = radius),
draggableY = TRUE
)
return(NULL)
})
plyr::ddply(data, .group, function(x) {
g <- unique(x$group)
i <- which(groups == g)
x$group <- NULL  # fix
rChart$series(
data = toJSONArray2(x, json = F, names = F),
name = g,
type = types[[i]],
marker = list(radius = radius),
draggableY = TRUE
)
return(NULL)
})
group
plyr::ddply(data, .(data$group), function(x) {
g <- unique(x$group)
i <- which(groups == g)
x$group <- NULL  # fix
rChart$series(
data = toJSONArray2(x, json = F, names = F),
name = g,
type = types[[i]],
marker = list(radius = radius),
draggableY = TRUE
)
return(NULL)
})
gropus
groups
plyr::ddply(data, groups, function(x) {
g <- unique(x$group)
i <- which(groups == g)
x$group <- NULL  # fix
rChart$series(
data = toJSONArray2(x, json = F, names = F),
name = g,
type = types[[i]],
marker = list(radius = radius),
draggableY = TRUE
)
return(NULL)
})
plyr::ddply(data, .groups, function(x) {
g <- unique(x$group)
i <- which(groups == g)
x$group <- NULL  # fix
rChart$series(
data = toJSONArray2(x, json = F, names = F),
name = g,
type = types[[i]],
marker = list(radius = radius),
draggableY = TRUE
)
return(NULL)
})
plyr::ddply(data, .(groups), function(x) {
g <- unique(x$group)
i <- which(groups == g)
x$group <- NULL  # fix
rChart$series(
data = toJSONArray2(x, json = F, names = F),
name = g,
type = types[[i]],
marker = list(radius = radius),
draggableY = TRUE
)
return(NULL)
})
environment
environment()
env()
?environment
parent.env()
environment()
environment(f)
.GlobalEnv
.Env
.env
.GlobalEnv
Q
close(con)
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line",
"bubble", "scatter"), group = "Clap", size = "Age")
h1
?plyr::ddply
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
dfx
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
libary(plyr)
library(plyr)
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
as.quoted(c("a", "b", "log(d)"))
.(group)
.(group,sex)
as.quoted(group,sex)
as.quoted(.(group,sex))
?``.
?`.`
.(a,b,c)
as.quoted(a,b,c)
as.quoted(~a + b + c)
as.quoted(~a + b + d)
mtcars
ddply(mtcars, "cyl", each(nrow, ncol))
ddply(mtcars, ~ cyl, each(nrow, ncol))
ddply(mtcars, .(cyl), each(nrow, ncol))
.dfx
.(dfx)
environment()
objects()
x.
environment()
?`.`
env.demo<-function(a,b,c,d) {print(objects())}
env.demo(1,"truck",c(1,2,3,4),pi)
env.demo<-function(a,b,c,d) {print(sys.frame}
env.demo<-function(a,b,c,d) {print(sys.frame()}
sys.frame()
env.demo<-function(a,b,c,d) {print(sys.frame())}
env.demo(1,"truck",c(1,2,3,4),pi)
env.demo<-function(a,b,c,d) {print(sys.function())}
env.demo(1,"truck",c(1,2,3,4),pi)
env.demo<-function(a,b,c,d) {print(sys.frames())}
env.demo(1,"truck",c(1,2,3,4),pi)
env.demo<-function(a,b,c,d) {print(sys.call())}
env.demo(1,"truck",c(1,2,3,4),pi)
hPlot
hPlot
ddply
env.demo
shinyServer
?ddply
?`.`
dfx
group
.group
(group)
.(group)
.(cfla)
?`.()`
?`.(`
?`.`
?`()`
?as.quoted
as.quoted(c("a", "b", "log(d)"))
.(c("a", "b", "log(d)"))
??quoted
ddply(mtcars, .(log(cyl)), each(nrow, ncol))
?`.`
rm(list=ls())
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
environment()
ddply(data, .(group),print)
if(!is.null(d$group)) {ddply(data, .(group), print)}
if (!is.null(d$group)) {
groups <- sort(unique(data$group))
types <- rep(d$type, length(groups))  # repeat types to match length of groups
plyr::ddply(data, .(group), function(x) {
g <- unique(x$group)
i <- which(groups == g)
x$group <- NULL  # fix
rChart$series(
data = toJSONArray2(x, json = F, names = F),
name = g,
type = types[[i]],
marker = list(radius = radius),
draggableY = TRUE
)
return(NULL)
})
)
rChart$legend(enabled = FALSE)
rChart
if (!is.null(d$group)) {
groups <- sort(unique(data$group))
types <- rep(d$type, length(groups))  # repeat types to match length of groups
plyr::ddply(data, .(group), function(x) {
g <- unique(x$group)
i <- which(groups == g)
x$group <- NULL  # fix
rChart$series(
data = toJSONArray2(x, json = F, names = F),
name = g,
type = types[[i]],
marker = list(radius = radius),
draggableY = TRUE
)
return(NULL)
})
}
rChart$legend(enabled = FALSE)
## yAxis
if (is.categorical(data$y)) {
rChart$yAxis(title = list(text = d$y), categories = unique(as.character(data$y)), replace = T)
} else {
rChart$yAxis(title = list(text = d$y), replace = T)
}
