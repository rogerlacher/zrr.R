library(shiny)
getwd()
ls
runApp("shiny")
runApp("shiny")
library(shiny)
getwd()
runApp("shiny")
View(countries)
ls -la
runApp("zrr.shiny")
?compiler
library(compiler)
?compiler
?compiler::compile
runApp("zrr.shiny")
source('~/R_Projects/zrr/zrr.shiny/algorithms.R', echo=TRUE)
test_MDM(9)
test_MDM()
runApp("zrr.shiny")
source('~/R_Projects/zrr/zrr.shiny/algorithms.R', echo=TRUE)
source('~/R_Projects/zrr/zrr.shiny/algorithms.R', echo=TRUE)
rMDM_Motion
runApp("zrr.shiny")
?Rprof
runApp("zrr.shiny")
summaryRprof(filename="Rprof.out")
summaryRprof(filename="zrr.shiny/Rprof.out")
ls
cmpfile(infile="zrr.shiny/algorithms.R",outfile="zrr.shiny/algorithms.R.c")
runApp("zrr.shiny")
?dyn.load
runApp("zrr.shiny")
?cmpfile
runApp("zrr.shiny")
runApp("zrr.shiny")
summaryRprof(filename="zrr.shiny/Rprof.out")
runApp("zrr.shiny")
View(x)
runApp("zrr.shiny")
runApp("zrr.shiny")
url <- "http://en.wikipedia.org/wiki/List_of_countries_by_credit_rating"
x <- readHTMLTable(readLines(url), which=3)
levels(x$Rating) <- substring(levels(x$Rating), 4,
nchar(levels(x$Rating)))
x$Ranking <- x$Rating
levels(x$Ranking) <- nlevels(x$Rating):1
x$Ranking <- as.character(x$Ranking)
x$Rating <- paste(x$Country, x$Rating, sep=": ")
x$Rating
x
x <- readHTMLTable(readLines(url), which=2)
View(x)
levels(x$Rating) <- substring(levels(x$Rating), 4,
nchar(levels(x$Rating)))
x$Ranking <- x$Rating
levels(x$Ranking) <- nlevels(x$Rating):1
x$Ranking <- as.character(x$Ranking)
x$Rating <- paste(x$Country, x$Rating, sep=": ")
View(x)
g<-    gvisGeoChart(x, "Country", "Ranking", hovervar="Rating",
options=list(gvis.editor="S&P",
projection="kavrayskiy-vii",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"));
g <-     gvisGeoChart(x, "Country", "Ranking",
options=list(gvis.editor="S&P",
projection="kavrayskiy-vii",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"));
plot(g)
g<-    gvisGeoChart(x, "Country", "Ranking", hovervar="Rating",
options=list(gvis.editor="S&P",
projection="kavrayskiy-vii",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"));
g<-    gvisGeoChart(x, "Country", "Ranking", hover="Rating",
options=list(gvis.editor="S&P",
projection="kavrayskiy-vii",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"));
View(x)
?gvisGeoChart
g <-     gvisGeoChart(x, "Country", "Ranking",colorvar="Rating",
options=list(gvis.editor="S&P",
projection="kavrayskiy-vii",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"))g;
runApp("zrr.shiny")
runApp("zrr.shiny")
View(x)
View(x)
runApp("zrr.shiny")
library(WDI)
?WDI
?WDISearch
?WDIsearch
WDIsearch(string="tractor")
WDIsearch(string="tractor",short=TRUE)
WDIsearch(string="tractor")["indicator"]
WDIsearch(string="tractor")[,1]
WDIsearch(string="tractor")[,2]
WDIsearch(string="tractor")[,0]
WDIsearch(string="tractor")[,1]
WDIsearch(string="tractor")
WDIsearch(string="population")
WDIsearch(string="tractor", short=FALSE)
?numericInput
?textInput
?WDI
WDIsearch(string="tractor")
WDIsearch(string="Agricultural tractors, exports" )
?WDIsearch
WDIsearch(string="" )
WDIsearch(string=)
WDIsearch()
WDIsearch(string="Agricultural tractors, exports" )
WDIsearch(string="Agricultural tractors, exports" )[name=="Agricultural tractors, exports"]
WDIsearch(string="Agricultural tractors, exports" )["name"=="Agricultural tractors, exports"]
WDIsearch(string="Agricultural tractors, exports" )["name"=="Agricultural tractors, exports"][,1]
WDIsearch(string="Agricultural tractors, exports" )["name"=="Agricultural tractors, exports",1]
WDIsearch(string="Agricultural tractors, exports" )
WDIsearch(string="Agricultural tractors, exports" )[,"name"]
WDIsearch(string="Agricultural tractors, exports" )[,"name"] == "Agricultural tractors, exports"
subset(WDIsearch(string="Agricultural tractors, exports" ),"name"== "Agricultural tractors, exports")
?subset
subset(WDIsearch(string="Agricultural tractors, exports" ),name== "Agricultural tractors, exports", select=indicator)
subset(WDIsearch(string="Agricultural tractors, exports" ),"name" == "Agricultural tractors, exports", select="indicator")
subset(WDIsearch(string="Agricultural tractors, exports" ),"name" == "Agricultural tractors, exports", select=indicator)
wdiIndicators <- WDIsearch()
wdiIndicators
names(wdiIndicators)
colnames(wdiIndicators)
subset(wdiIndicators, name=="Total expenditure on educational institutions and administration as a % of GDP. Public sources. Tertiary",subset=indicator)
subset(wdiIndicators, name=="Total expenditure on educational institutions and administration as a % of GDP. Public sources. Tertiary")
subset(wdiIndicators, "nam" =="Total expenditure on educational institutions and administration as a % of GDP. Public sources. Tertiary")
subset(wdiIndicators, "name" =="Total expenditure on educational institutions and administration as a % of GDP. Public sources. Tertiary")
typeof(WDIsearc())
typeof(WDIsearch())
WDIsearch(string="gdp")
WDIsearch(string="tractor")
is.data.frame(WDIsearch(string="tractor"))
as.data.frame(WDIsearch(string="tractor"))
as.data.frame(WDIsearch(string="tractor"))[name]
as.data.frame(WDIsearch(string="tractor"))[,name]
as.data.frame(WDIsearch(string="tractor"))[,"name"]
as.data.frame(WDIsearch(string="tractor"))[,"indicator"]
WDIsearch(string="tractor")[,"indicator"]
WDIsearch(string="tractor")[,"name"]
WDIsearch(string="tractor")[,"name"] == "Agricultural tractors, imports"
WDIsearch(WDIsearch(string="tractor")[,"name"] == "Agricultural tractors, imports","indicator")
WDIsearch(string="tractor")[WDIsearch(string="tractor")[,"name"] == "Agricultural tractors, imports","indicator"]
?indexof
?index
??index
View(r)
View(`r1`)
View(`r1`)
View(`r1`)
r1[,"Code"]
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
WDIsearch(string = "")[,"name"]
WDIsearch(string = "tractor")[,"name"]
runApp("zrr.shiny")
wdiIndicators <-  WDIsearch(string = "tractor")[,"name"]
wdiIndicators
wdiIndicators[1]
wdiIndicators[2]
typeof(wdiIndicators)
is.vector(wdiIndicators)
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
demo(Worldbank)
demo(Worldbank)
demo(WorldBank)
install.packages("WDI")
demo(WorldBank)
library(googleVis)
demo(WorldBank)
runApp("zrr.shiny")
library(shiny)
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
library(shiny)
library(WDI)
WDIsearch(string = "Agricultural tractors, exports")[,"indicator"]
WDIsearch(string = "Agricultural tractors, exports")[,"indicator"][1]
WDIsearch(string = input$wdiIndicator)
WDIsearch(string = "Agricultural tractors, exports")
WDIsearch(string = "Agricultural tractors, exports")[,"name"]
WDIsearch(string = "Agricultural tractors, exports")[,"name"] =="Agricultural tractors, exports"
inds <- WDIsearch(string = "Agricultural tractors, exports")
inds
inds[,"name"] == "Agricultural tractors, exports"
inds[inds[,"name"] == "Agricultural tractors, exports","indicator"]
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
subset(r,Country.Name %in% c("China","Burundi"), select="Code")
levels(subset(r,Country.Name %in% c("China","Burundi"), select="Code"))
levels(factor(subset(r,Country.Name %in% c("China","Burundi"), select="Code")))
?uniq
levels(factors(subset(r,Country.Name %in% c("China","Burundi"), select="Code")))
levels(factor(subset(r,Country.Name %in% c("China","Burundi"), select="Code")))
factor(subset(r,Country.Name %in% c("China","Burundi"), select="Code"))
subset(r,Country.Name %in% c("China","Burundi"), select="Code")
subset(r,Country.Name %in% c("China","Burundi"), select="Code")
runApp("zrr.shiny")
subset(countries,Country.Name %in% c("China","Burundi"), select="Code")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
countryCodes <- subset(countries,Country.Name %in% input$countries, select="Code")
countryCodes
countryCodes$Code
inds <- WDIsearch(string = input$wdiIndicator)
inds
theIndicator <- inds[inds[,"name"] == input$wdiIndicator,"indicator"]
theIndicator
DF <- WDI(country=countryCodes$Code,indicator=theIndicator, start=1990, end=2013)
DF
ggplot(DF, mapping=aes(year, theIndicator, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=input$wdiIndicator)+ylab("")
ggplot(DF, mapping=aes(year, AG.AGR.TRAC.NO, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=input$wdiIndicator)+ylab("")
ggplot(DF, mapping=aes(year,3, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=input$wdiIndicator)+ylab("")
?ggplot
ggplot(DF, mapping=aes(x=year,y=theIndicator, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=input$wdiIndicator)+ylab("")
ggplot(DF, mapping=aes(x=year,y=AG.AGR.TRAC.NO, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=input$wdiIndicator)+ylab("")
ggplot(DF, mapping=aes(x=year,y=colnames(DF)[3], color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=input$wdiIndicator)+ylab("")
DF
Q
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
theIndicator
theIndicator <- "AG.AGR.TRAC.NO"
theIndicator
inds <- WDIsearch(string = )
theIndicator <- inds[inds[,"name"] == input$wdiIndicator,"indicator"]
countries
countryCodes <- subset(countries,Country.Name %in% c("China","Burundi"), select="Code")
countryCodes
DF <- WDI(country=countryCodes$Code,indicator=theIndicator, start=1990, end=2013)
DF
ggplot(DF, mapping=aes(x = year, y = AG.AGR.TRAC.NO, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=input$wdiIndicator)+ylab("")
ggplot(DF, mapping=aes(x = year, y = AG.AGR.TRAC.NO, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=theIndicator)+ylab("")
ggplot(DF, mapping=aes(x = year, y = theIndicator, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=theIndicator)+ylab("")
ggplot(DF, mapping=aes(x = year, y = as.name(theIndicator), color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=theIndicator)+ylab("")
ggplot(DF, mapping=aes(x = year, y = theIndicator, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=theIndicator)+ylab("")
?as.name
ggplot(DF, mapping=aes(x = year, y = [3], color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=theIndicator)+ylab("")
ggplot(DF, mapping=aes(x = year, y = 3, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=theIndicator)+ylab("")
ggplot(DF, mapping=aes(x = year, y = theIndicator, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=theIndicator)+ylab("")
ggplot(DF, mapping=aes(x = year, y = AG.AGR.TRAC.NO, color=country))+geom_line(stat="identity")+theme_bw()+xlab("Year")+labs(title=theIndicator)+ylab("")
??as
??as.
?as.colname
?as.title
?as.title
?as.header
??cast
?shiny
library("pqioperf", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
?pqioperf
??pqioperf
detach("package:pqioperf", unload=TRUE)
library("pqioperf", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
detach("package:pqioperf", unload=TRUE)
library(shiny)
runApp("zrr.shiny")
url <- "http://en.wikipedia.org/wiki/List_of_countries_by_credit_rating"
x <- readHTMLTable(readLines(url), which=2)
View(x)
View(x)
x$Rating
x$V2
?readHTMLTable
x <- readHTMLTable(readLines(url), header= TRUE, which=2)
levels(x$Rating) <- substring(levels(x$Rating), 4,
nchar(levels(x$Rating)))
View(x)
x <- readHTMLTable(readLines(url), header=TRUE,which=2)
colnames(x)
x[-1,]
x <- readHTMLTable(readLines(url), header= c("Country","Rating","Outlook","Date","Ref."), which=2)
x <- x[-1,]  # skip row with headers
levels(x$Rating) <- substring(levels(x$Rating), 4,
nchar(levels(x$Rating)))
View(x)
rm(x)
x <- readHTMLTable(readLines(url), header= TRUE, which=2)
View(x)
x <- readHTMLTable(readLines(url), header= TRUE, which=2)
rm(x)
x <- readHTMLTable(readLines(url), header= c("Country","Rating","Outlook","Date","Ref."), which=2)
View(x)
x <- readHTMLTable(readLines(url), which=2)
colnames(x) <- c("Country","Rating","Outlook","Date","Ref."),
x <- x[-1,]  # skip row with headers
levels(x$Rating) <- substring(levels(x$Rating), 4,
nchar(levels(x$Rating)))
View(x)
colnames(x) <- c("Country","Rating","Outlook","Date","Ref.")
View(x)
levels(x$Rating) <- substring(levels(x$Rating), 4,
nchar(levels(x$Rating)))
rm(list=ls())
runApp("zrr.shiny")
runApp("zrr.shiny")
r
colnames(r)
sapply(r[10:20],median)
sapply(r[10:20],sum)
?sapply
sapply(r,sum)
colnames(r)
colnames(r1)
sapply(r[10:20],sum)
library(compiler)
?compile
cmpfile(infile="zrr.shiny/algorithms.R")
library(shiny)
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny")
View(`r1`)
xRisks
r1
xRisks <- t(r1[,10:15])
View(xRisks)
colnames(r)
View(r)
subset(r,Country.Name %in% c("Albania","Australia"))
c <- subset(r,Country.Name %in% c("Albania","Australia"))
View(c)
View(`r1`)
View(`r1`)
head(r1)
head(xRisks)
colnames(head(r1))
rm(c)
?melt
class(r)
class(r1)
class(xRisks)
?t
as.data.frame(xRisks)
xRisks <- as.data.frame(t(r1[,10:15]))
View(xRisks)
class(xRisks)
View(`r1`)
xRisks <- as.data.frame(t(r1[,c(3,10:15]))
xRisks <- as.data.frame(t(r1[,c(3,10:15])))
xRisks <- as.data.frame(t(r1[,c(3,10:15)]))
xRisks
View(xRisks)
colnames(xRisks)
c<-subset(r,Country.Name %in% c("Australia","Albania"))
c<-data.frame(subset(r,Country.Name %in% c("Australia","Albania")),row.names=2)
c<-data.frame(subset(r,Country.Name %in% c("Australia","Albania")),row.names=NULL)
View(c)
?subset
xRisks<-t(c[,10:15])
View(xRisks)
View(c)
c1 <- subset(c,Date=="2010-04-01")
View(`c1`)
c1 <- data.frame(subset(c,Date=="2010-04-01"),row.names=NULL)
View(`c1`)
xRisks<-t(c1[,c(2,10:15)])
View(xRisks)
View(`c1`)
c1 <- data.frame(subset(c,Date=="2010-04-01"),select=-1,row.names=NULL)
View(`c1`)
c1 <- data.frame(subset(c,Date=="2010-04-01"),select=2:15,row.names=NULL)
View(`c1`)
c1 <- data.frame(subset(c,Date=="2010-04-01"),row.names=NULL)
View(`c1`)
c1 <- data.frame(subset(c,Date=="2010-04-01",select=-1),row.names=NULL)
View(`c1`)
xRisks<-t(c1[,10:15])
View(xRisks)
xRisks<-data.frame(t(c1[,10:15]))
View(xRisks)
xRisks<-data.frame(t(c1[,10:15]))
xRisks<-t(c1[,10:15])
View(xRisks)
xRisks<-t(c1[,c(1,10:15)])
View(xRisks)
?t
?reshape
