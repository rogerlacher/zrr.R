runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny")
runApp("zrr.shiny")
library(shiny)
runApp("zrr.shiny.ergonDB")
runApp("zrr.shiny.ergonDB")
runApp("zrr.shiny.ergonDB")
library(shiny)
runApp("zrr.shiny.ergonDB")
library(shiny)
runApp("zrr.shiny.ergonDB")
xRisks
yRisks
runApp("zrr.shiny.ergonDB")
runApp("zrr.shiny.ergonDB")
runApp("zrr.shiny.ergonDB")
runApp("zrr.shiny.ergonDB")
?sliderOutput
library(shiny)
?checkboxGroupInput
?radioButton
?selectInput
?invoke
?eval
?switch
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
input$algorithm
input$options
input$algorithm
input$options
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
xRisks
yRisks
algorithm
options
?checkboxGroup
?checkboxGroupInput
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
xRisks
yRisks
algorithm
options
df
ddply(df,.(GEO_NAME),function(d) euclid1Country(d))
df
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
rx  = subset(df,WALL=="x",select="INDICATOR_VALUE")
ry  = subset(df,WALL=="y",select="INDICATOR_VALUE")
df
rx
ry
c(mean(rx), mean(ry))
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
rx  = subset(df,WALL=="x",select="INDICATOR_VALUE")
ry  = subset(df,WALL=="y",select="INDICATOR_VALUE")
class(rx)
mean(rx)
mean(as.double(rx))
ry  = subset(df,WALL=="y",select="INDICATOR_VALUE")[1,]
ry
rx  = subset(df,WALL=="x",select="INDICATOR_VALUE")[,1]
rx
class(rx)
mean(rx)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.ergonDB", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
input$countries
mdm
md
mdm
input$countries
mdm
input$countries
runApp("zrr.shiny.dev", launch.browser=FALSE)
mdm
sCountries
mdm
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
runApp("zrr.shiny.dev", launch.browser=FALSE)
library(shiny)
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
cc
r
library("RJSONIO", lib.loc="C:/opt/R/R-3.0.2/library")
toJSON(r)
txt <- toJSON(r)
?write
write(txt,"data.json")
library(shiny)
runApp("zrr.shiny.dev")
?pageWithSidebar
pageWithSidebar
bootstrapPage
?ext
ext
tagList
tags
bootstrapPage
tags$head
bootstrapPage
pageWithSidebar
div
bootstrapPage
shinyUI
renderPage
textConnectionValue
force
renderPage
pageWithSidebar
pageWithSidebar
headerPanel
pageWithSidebar
bootstrapPage
tagAppendChild
bootstrapPage
tags$head
runApp
serviceApp
shinyCallingHandlers
runApp("zrr.shiny.dev")
?includeCSS
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
clear
?pageWithSidebar
?shinyUI
?ui
??ui
?fluidPage
?navbarPage
fluidPage
library(shiny)
fluidPage
shiny$fluidPage
library(shiny)
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
runApp("zrr.shiny.dev",launch.browser="false")
library(shiny)
runApp("zrr.shiny.ergonDB")
cbind(md, rep("na",5))
md
xr
?rbind
?rep("na",5)
rep("na",5)
?data.frame
?matrix
matrix(),4,5)
matrix(,4,5)
rows(md)
nrow(md)
md
md <- md[,-5]
md
cbind(md,matrix(,nrow(md),5))
mm<-cbind(md,matrix(,nrow(md),5))
colnames(mm)
rbind(xr,yr,md)
ncol(xr)
ncol(yr)
ncol(md)
md
rbind(xr,yr,mm)
colnames(mm) <- colnames(xr)
rbind(xr,yr,mm)
rbind(mm,xr,yr)
xr
rbind(mm,xr)
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
xr
yr
md
md
colnames(md) <- colnames(xr)
md
rbind(md,xr)
md
xr
names(md)
rownames(md)
rownames(xr)
?rbind
cbind(1,1:7)
cbind(md,c(0,0,0,0,0))
rbind(1,1:3)
rbind(xr,md)
rbind(xr,md)
rbind(xr,yr,md)
rbind(xr,yr,md[-1,]);
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
?downloadHandler
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
?write.csv
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
runApp("zrr.shiny.dev",launch.browser="FALSE")
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
?write.csv
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
library(shiny)
runApp("zrr.shiny.ergonDB",launch.browser="FALSE")
library(shiny)
runApp("zrr.shiny.ergonDB")
cal
cal()
tt.sample <- read.csv("C:/temp/tt-sample.csv", sep=";")
View(tt.sample)
require(JSON)
library("RJSONIO", lib.loc="C:/opt/R/R-3.0.2/library")
toJSON(tt.sample)
j -> toJSON(tt.sample)
j <- toJSON(tt.sample)
?write
write(j,"out.json")
getwd();
j <- toJSON(t(tt.sample))
write(j,"out.json")
risks_20070101 <- read.csv("C:/Users/chl9804/Desktop/ZRR/DataCollection/QCA/qca2zrrimporter/zrrdata/20070101/risks_20070101.csv", header=F)
View(risks_20070101)
x <- risks_20070101$V60
x
x <- risks_20070101$V60[5:161]
x
x[0]
x[1]
View(x)
x <- risks_20070101$V60[6:162]
x[0]
x
summary(x)
rm(risks_20070101)
rm(x)
risks_20070101 <- read.csv("C:/Users/chl9804/Desktop/ZRR/DataCollection/QCA/qca2zrrimporter/zrrdata/20070101/risks_20070101.csv", header=F)
View(risks_20070101)
risks <- risks_20070101[-1,]
View(risks)
risks <- risks[-c(3,4,5),]
View(risks)
View(risks)
risks <- risks[-2,]
View(risks)
colnames(risks) <- risks[1,]
View(risks)
risks[1,]
View(risks)
risks[-1,]
colnames(risks) <- risks[1,]
View(risks)
colnames(risks) <- risks[2,]
View(risks)
rm(risks)
rm(risks_20070101)
risks_20070101 <- read.csv("C:/Users/chl9804/Desktop/ZRR/DataCollection/QCA/qca2zrrimporter/20070101/risks_20070101.csv")
View(risks_20070101)
summary(risks_20070101)
?read.csv
`Q4_risks_` <- read.table("C:/Users/chl9804/Desktop/ZRR/DataCollection/QCA/qca2zrrimporter/input/Q4_risks_.csv", sep=";", quote="\"")
View(`Q4_risks_`)
`Q4_risks_` <- read.table("C:/Users/chl9804/Desktop/ZRR/DataCollection/QCA/qca2zrrimporter/input/Q4_risks_.csv", sep=";", quote="\"")
View(`Q4_risks_`, skip=5)
`Q4_risks_` <- read.table("C:/Users/chl9804/Desktop/ZRR/DataCollection/QCA/qca2zrrimporter/input/Q4_risks__.csv", sep=";", quote="\"")
View(`Q4_risks_`)
rm(Q4_risks_)
`Q4_risks__` <- read.csv("C:/Users/chl9804/Desktop/ZRR/DataCollection/QCA/qca2zrrimporter/input/Q4_risks__.csv", sep=";")
View(`Q4_risks__`)
r <- subset(Q4_risks__,Date =='01.12.2013')
summary(r)
r <- subset(Q4_risks__,Date =='01.01.2007')
summary(r)
r <- subset(Q4_risks__,Date =='01.12.2013')
summary(r)
plot(Q4_risks__)
r
plot(r)
plot(summary(r))
colnames(r)
cor.test(r[,4],r[,5])
r <- subset(Q4_risks__,Date =='01.12.2013')
summary(r)
cor.test(r[,4],r[,5])
colnames(r)
cor.test(r$Water.dependency,r$Demographic.shifts)
x<-c(1,2,3,4,5)
y<-2.5*x
y
cor.test(x,y)
x[1] <- 1.4
cor.test(x,y)
y<-2.5*x
cor(x,y)
cor.test(x,y)
cor.test(r$Water.dependency,r$Demographic.shifts)
install.packages("nutshell")
library(nutshell)
shiller.index
data(shiller.index)
shiller
data
library(shiny)
runApp("zrr.shiny")
runApp("zrr.shiny")
runApp("zrr.shiny.dev")
runApp("zrr.shiny.ergonDb")
library(shiny)
runApp("zrr.shiny.dev")
library(shiny)
runApp("zrr.shiny.ergonDB")
library(shiny)
runApp("zrr.shiny.ergonDB")
runApp("zrr.shiny.ergonDB")
exit
library(shiny)
runApp("zrr.shiny.ergonDB")
rm(list=ls())
data <- read.csv("C:/temp/data.csv", sep=";")
View(data)
is.na(data)
data <- read.csv("C:/temp/data.csv", sep=";")
View(data[,12])
is.na(data[,12])
is.na(data[,13])
is.na(data[,14])
is.na(data[,15])
is.na(data[,16])
is.na(data[,17])
is.na(data[,11])
is.na(data[,10])
is.na(data[,32])
is.na(data[,21])
dist(data)
dist(na.omit(data)
)
d<-dist(na.omit(data))
View(d)
rm(d)
dist?
;
?dist
d<-dist(na.omit(data),upper=TRUE)
rm(d)
head(dist(na.omit(data),upper=TRUE))
dist(na.omit(data),upper=TRUE)
d<-dist(na.omit(data),upper=TRUE)
summary(d)
kmeans(d,centers=156)
kmeans(d,centers=120)
kmeans(d,centers=120,replace=TRUE)
?kmeans
kmeans(d,centers=5)
nrow(data)
ncol(data)
dx <- dist(na.omit(data[,c(2..10)]))
dx <- dist(na.omit(data[,c(2..10)]))
c(2..10)
seq(2,10)
dx <- dist(na.omit(data[,seq(2,10)]))
dy <- dist(na.omit(data[,seq(12,24)]))
kx <- kmeans(dx,centers=10)
ky <- kmeans(dy,centers=10)
kx
kx$clusters
kx()
kx$cluster
kmy$cluster
ky$cluster$
;
ky$cluster
class(ky$cluster)
type(ky$cluster)
ky$cluster[10]
ky$cluster[1]
ky$cluster[2]
ky$cluster[3]
ky$cluster[[3]
]
ky$cluster[[10]]
unlist(kx$cluster)
unlist(kx$cluster)[1]
unlist(kx$cluster)[2]
unlist(kx$cluster)[[2]]
ky$cluster
kx$cluster
??na.omit
?dist
require(graphics)
x <- matrix(rnorm(100), nrow = 5)
dist(x)
dist(x, diag = TRUE)
dist(x, upper = TRUE)
m <- as.matrix(dist(x))
d <- as.dist(m)
stopifnot(d == dist(x))
## Use correlations between variables "as distance"
dd <- as.dist((1 - cor(USJudgeRatings))/2)
round(1000 * dd) # (prints more nicely)
plot(hclust(dd)) # to see a dendrogram of clustered variables
## example of binary and canberra distances.
x <- c(0, 0, 1, 1, 1, 1)
y <- c(1, 0, 1, 1, 0, 1)
dist(rbind(x, y), method = "binary")
## answer 0.4 = 2/5
dist(rbind(x, y), method = "canberra")
## answer 2 * (6/5)
## To find the names
labels(eurodist)
## Examples involving "Inf" :
## 1)
x[6] <- Inf
(m2 <- rbind(x, y))
dist(m2, method = "binary")   # warning, answer 0.5 = 2/4
## These all give "Inf":
stopifnot(Inf == dist(m2, method =  "euclidean"),
Inf == dist(m2, method =  "maximum"),
Inf == dist(m2, method =  "manhattan"))
##  "Inf" is same as very large number:
x1 <- x; x1[6] <- 1e100
stopifnot(dist(cbind(x, y), method = "canberra") ==
print(dist(cbind(x1, y), method = "canberra")))
## 2)
y[6] <- Inf #-> 6-th pair is excluded
dist(rbind(x, y), method = "binary"  )   # warning; 0.5
dist(rbind(x, y), method = "canberra"  ) # 3
dist(rbind(x, y), method = "maximum")    # 1
dist(rbind(x, y), method = "manhattan")  # 2.4
clear
library(shiny)
rm(list=ls())
runApp("zrr.shiny.ErgonDB")
?selectInput
runApp("zrr.shiny.ErgonDB")
